# -*- coding: utf-8 -*-
import calendar
import time
import datetime
from datetime import datetime, date,timedelta
from dateutil import relativedelta
from openerp.report import report_sxw
from datetime import datetime, date,timedelta as td
from openerp.osv import osv

class Parser(report_sxw.rml_parse):
    def __init__(self, cr, uid, name, context=None):
        super(Parser, self).__init__(cr, uid, name, context=context)
        self.localcontext.update({
            'time': time,
            'get_lines':self._get_lines,
            'get_total':self._get_total,
        })
    def _get_lines(self,start_date, end_date, partner_ids):
        now = datetime.now()
        now = now.strftime("%Y-%m-%d")
        lines=[]
        if len(partner_ids)>0:
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [('partner_id', 'in', partner_ids)], context=None)        
        else:
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [], context=None)        
        contracts=self.pool.get('ownership.contract').browse(self.cr, self.uid, contract_ids)
        for contract in contracts:
            for line in contract.loan_line:
                if not line.paid and line.date < now and line.date>=start_date and line.date <=end_date:
                    lines.append(line)
        return lines

    def _get_total(self,start_date, end_date, partner_ids):
        now = datetime.now()
        now = now.strftime("%Y-%m-%d")
        sum=0
        if len(partner_ids)>0:
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [('partner_id', 'in', partner_ids)], context=None)        
        else:
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [], context=None)        
        contracts=self.pool.get('ownership.contract').browse(self.cr, self.uid, contract_ids)
        for contract in contracts:
            for line in contract.loan_line:
                if not line.paid and line.date < now and line.date>=start_date and line.date <=end_date:
                    sum+=line.amount
        return sum

class report_late_payments_customers(osv.AbstractModel):
    _name = 'report.real_estate.report_late_payments_customers'
    _inherit = 'report.abstract_report'
    _template = 'real_estate.report_late_payments_customers'
    _wrapped_report_class = Parser
