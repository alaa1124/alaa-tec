# -*- coding: utf-8 -*-
import calendar
import time
import datetime
from datetime import datetime, date,timedelta
from dateutil import relativedelta
from openerp.report import report_sxw
from datetime import datetime, date,timedelta as td
from openerp.osv import osv

class Parser(report_sxw.rml_parse):
    def __init__(self, cr, uid, name, context=None):
        super(Parser, self).__init__(cr, uid, name, context=context)
        self.localcontext.update({
            'time': time,
            'get_lines':self._get_lines,
            'get_total':self._get_total,
        })
    def _get_lines(self,start_date, end_date, salesperson_ids):
        result=[]
        if len(salesperson_ids)==0:
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [('date','>=',start_date),('date','<=',end_date)], context=None)        
            contracts=self.pool.get('ownership.contract').browse(self.cr, self.uid, contract_ids)
            users=[]
            for c in contracts:
                users.append(c.user_id)
            salesperson_ids=users
            salesperson_ids = list(set(salesperson_ids))
        for person in salesperson_ids:	
            lines=[]
            paid=0
            amount=0
            balance=0
            res={}
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [('user_id', '=', person.id),('date','>=',start_date),('date','<=',end_date)], context=None)        
            contracts=self.pool.get('ownership.contract').browse(self.cr, self.uid, contract_ids)
            for contract in contracts:
                line = []
                line.append(contract.user_id.name)
                line.append(contract.name)
                line.append(contract.date)
                line.append(contract.city)
                line.append(contract.region)
                line.append(contract.building.name)
                line.append(contract.building_unit.name)

		paid_contract=0
		balance_contract=0
		total_contract=0
		for line in contract.loan_line:
		    if line.paid:
		        paid_contract+= line.amount
		for line in contract.loan_line:
		    if not line.paid:
		        balance_contract+= line.amount
		for line in contract.loan_line:
		    total_contract+= line.amount

		print ("!!!!!!!!!!!!!!!!!!!!!!!!!!!!@@@@@", total_contract)
                line.append(total_contract)
                line.append(paid_contract)
                line.append(balance_contract)

                lines.append(line)
                paid+=paid_contract
                amount+=total_contract
                balance+=balance_contract
	    res['lines']=lines	
            res['totals']=[amount,paid,balance]
            result.append(res)

        return result


    def _get_total(self,start_date, end_date, salesperson_ids):
        result=[]
        paid=0
        amount=0
        balance=0
        if len(salesperson_ids)==0:
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [('date','>=',start_date),('date','<=',end_date)], context=None)        
            contracts=self.pool.get('ownership.contract').browse(self.cr, self.uid, contract_ids)
            users=[]
            for c in contracts:
                users.append(c.user_id)
            salesperson_ids=users
            salesperson_ids = list(set(salesperson_ids))
        for person in salesperson_ids:	
            contract_ids = self.pool.get('ownership.contract').search(self.cr, self.uid, [('user_id', '=', person.id),('date','>=',start_date),('date','<=',end_date)], context=None)        
            contracts=self.pool.get('ownership.contract').browse(self.cr, self.uid, contract_ids)
            for contract in contracts:
                paid+=contract.paid
                amount+=contract.total_amount
                balance+=contract.balance
            result=[[amount,paid,balance]]
        return result

class report_sales_rep_details(osv.AbstractModel):
    _name = 'report.real_estate.report_sales_rep'
    _inherit = 'report.abstract_report'
    _template = 'real_estate.report_sales_rep'
    _wrapped_report_class = Parser

